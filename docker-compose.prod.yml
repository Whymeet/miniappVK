version: '3.8'

services:
  # Backend (Django + DRF)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vk_miniapp_backend
    env_file:
      - production.env
    ports:
      - "8000:8000"
    environment:
      - DJANGO_DEBUG=False
      - CORS_ALLOW_ALL_ORIGINS=False
      - DATABASE_URL=postgresql://vkuser:$${POSTGRES_PASSWORD}@db:5432/vkminiapp
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    restart: always
    depends_on:
      db:
        condition: service_healthy
    networks:
      - vk_miniapp_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: vk_miniapp_db
    env_file:
      - production.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vkuser -d vkminiapp"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - vk_miniapp_network

  # Nginx для раздачи статики и проксирования запросов
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - backend_static:/var/www/static
      - backend_media:/var/www/media
    depends_on:
      - backend
    restart: always
    networks:
      - vk_miniapp_network

volumes:
  backend_static:
  backend_media:
  postgres_data:

networks:
  vk_miniapp_network:
    driver: bridge
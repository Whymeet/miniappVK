from django.contrib import admin
from django.http import HttpResponse, JsonResponse
from django.utils.html import format_html
from django.shortcuts import render, redirect
from django.urls import path, reverse
from django.contrib import messages
from django.utils.safestring import mark_safe
from django.contrib.admin import AdminSite
import csv
import json
from .models import ClickLog, Subscriber, Offer, BrandConfig, AppConfig, ModalSettings
from .statistics import get_dashboard_summary, get_top_offers


# –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏
class CustomAdminSite(AdminSite):
    site_header = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ó–∞–π–º–æ–≤'
    site_title = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
    index_title = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º'
    
    def index(self, request, extra_context=None):
        extra_context = extra_context or {}
        extra_context['statistics_url'] = '/api/statistics/'
        return super().index(request, extra_context)


class ClickLogInline(admin.TabularInline):
    """Inline –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    model = ClickLog
    extra = 0
    fields = ['offer', 'brand', 'created_at', 'ip_address']
    readonly_fields = ['offer', 'brand', 'created_at', 'ip_address']
    can_delete = False
    
    def has_add_permission(self, request, obj=None):
        return False


def export_subscribers_to_csv(modeladmin, request, queryset):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ CSV"""
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="subscribers_export.csv"'
    response.write('\ufeff')  # UTF-8 BOM –¥–ª—è Excel
    
    writer = csv.writer(response)
    writer.writerow([
        'VK User ID',
        'Group ID',
        'Brand',
        'Subscribed',
        'Allowed From Group',
        'Can Receive Messages',
        'Created At',
        'Subscribed At',
        'Unsubscribed At',
        'Total Clicks',
    ])
    
    for subscriber in queryset:
        writer.writerow([
            subscriber.vk_user_id,
            subscriber.group_id,
            subscriber.brand,
            'Yes' if subscriber.subscribed else 'No',
            'Yes' if subscriber.allowed_from_group else 'No',
            'Yes' if subscriber.can_receive_messages else 'No',
            subscriber.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            subscriber.subscribed_at.strftime('%Y-%m-%d %H:%M:%S') if subscriber.subscribed_at else '',
            subscriber.unsubscribed_at.strftime('%Y-%m-%d %H:%M:%S') if subscriber.unsubscribed_at else '',
            subscriber.clicks.count(),
        ])
    
    return response


export_subscribers_to_csv.short_description = "–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ CSV"


@admin.register(AppConfig)
class AppConfigAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –µ–¥–∏–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞"""
    
    def has_add_permission(self, request):
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        return not AppConfig.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        return False
    
    list_display = ['app_name', 'color_preview', 'updated_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('app_name', 'logo_url')
        }),
        ('üé® –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞', {
            'fields': (
                ('color_primary', 'color_secondary'),
                ('color_background', 'color_surface'),
                ('color_text', 'color_text_secondary'),
                ('color_accent', 'color_error', 'color_success'),
            ),
            'description': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HEX: #FF6B35. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–Ω–æ–ø–∫–∞–º.'
        }),
        ('üìù –¢–µ–∫—Å—Ç—ã', {
            'fields': ('subtitle', 'cta_text', 'disclaimer')
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': (
                'default_sort',
                ('show_filters', 'show_disclaimer', 'enable_messages'),
            )
        }),
        ('üîò –¶–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', {
            'fields': (
                'sort_button_rate_color',
                'sort_button_sum_color',
                'sort_button_term_color',
            ),
            'description': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–≤–µ—Ç –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏'
        }),
        ('üé® –ì—Ä–∞–¥–∏–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤', {
            'fields': (
                'card_gradient_enabled',
                ('card_gradient_start', 'card_gradient_end'),
            ),
            'description': '–í–∫–ª—é—á–∏—Ç–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–≤–µ—Ç–∞'
        }),
        ('üîó –ö–Ω–æ–ø–∫–∞ "–ú–´ –í –í–ö"', {
            'fields': (
                'vk_group_url',
                'vk_button_color',
            ),
            'description': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É –í–ö'
        }),
    )
    
    readonly_fields = ['updated_at']
    
    def color_preview(self, obj):
        return format_html(
            '<div style="display: flex; gap: 4px;">'
            '<div style="width: 24px; height: 24px; background: {}; border: 1px solid #ccc; border-radius: 4px;" title="–û—Å–Ω–æ–≤–Ω–æ–π"></div>'
            '<div style="width: 24px; height: 24px; background: {}; border: 1px solid #ccc; border-radius: 4px;" title="–í—Ç–æ—Ä–∏—á–Ω—ã–π"></div>'
            '<div style="width: 24px; height: 24px; background: {}; border: 1px solid #ccc; border-radius: 4px;" title="–ê–∫—Ü–µ–Ω—Ç"></div>'
            '</div>',
            obj.color_primary,
            obj.color_secondary,
            obj.color_accent
        )
    color_preview.short_description = '–¶–≤–µ—Ç–∞'
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('export-config/', self.admin_site.admin_view(self.export_config), name='app_appconfig_export'),
            path('import-config/', self.admin_site.admin_view(self.import_config), name='app_appconfig_import'),
        ]
        return custom_urls + urls
    
    def export_config(self, request):
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ JSON"""
        config = AppConfig.get_or_create_config()
        response = HttpResponse(config.export_to_json(), content_type='application/json')
        response['Content-Disposition'] = 'attachment; filename="app_config.json"'
        return response
    
    def import_config(self, request):
        """–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON"""
        if request.method == 'POST' and request.FILES.get('config_file'):
            try:
                config_file = request.FILES['config_file']
                json_data = config_file.read().decode('utf-8')
                AppConfig.import_from_json(json_data)
                messages.success(request, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!')
                return redirect('..')
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}')
        
        return render(request, 'admin/app/appconfig/import.html')
    
    def changelist_view(self, request, extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞"""
        extra_context = extra_context or {}
        extra_context['show_export_import'] = True
        return super().changelist_view(request, extra_context)
    
    def change_view(self, request, object_id, form_url='', extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        extra_context = extra_context or {}
        extra_context['show_export_import'] = True
        return super().change_view(request, object_id, form_url, extra_context)


@admin.register(BrandConfig)
class BrandConfigAdmin(admin.ModelAdmin):
    list_display = [
        'brand_key',
        'name',
        'color_preview',
        'is_active',
        'updated_at',
    ]
    list_filter = ['is_active', 'created_at']
    search_fields = ['brand_key', 'name']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('brand_key', 'name', 'logo_url', 'is_active')
        }),
        ('–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞', {
            'fields': (
                ('color_primary', 'color_secondary'),
                ('color_background', 'color_surface'),
                ('color_text', 'color_text_secondary'),
                ('color_accent', 'color_error', 'color_success'),
            ),
            'description': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HEX: #FF6B35'
        }),
        ('–¢–µ–∫—Å—Ç—ã', {
            'fields': ('subtitle', 'cta_text', 'disclaimer')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': (
                'default_sort',
                ('show_filters', 'show_disclaimer', 'enable_messages'),
            )
        }),
    )
    
    readonly_fields = ['created_at', 'updated_at']
    
    def color_preview(self, obj):
        return format_html(
            '<div style="display: flex; gap: 4px;">'
            '<div style="width: 20px; height: 20px; background: {}; border: 1px solid #ccc;"></div>'
            '<div style="width: 20px; height: 20px; background: {}; border: 1px solid #ccc;"></div>'
            '<div style="width: 20px; height: 20px; background: {}; border: 1px solid #ccc;"></div>'
            '</div>',
            obj.color_primary,
            obj.color_secondary,
            obj.color_accent
        )
    color_preview.short_description = '–¶–≤–µ—Ç–∞'


@admin.register(Offer)
class OfferAdmin(admin.ModelAdmin):
    list_display = [
        'partner_name',
        'sum_range',
        'term_range',
        'rate_text',
        'is_active',
        'priority',
        'clicks_total',
        'clicks_today',
        'clicks_week',
        'clicks_month',
        'unique_users',
        'statistics_link',
        'created_at',
    ]
    list_filter = ['is_active', 'approval_probability', 'created_at']
    search_fields = ['partner_name']
    ordering = ['-priority', '-created_at']
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –∫–ª–∏–∫–∞–º (–Ω–æ –Ω–µ –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü)
    # admin_order_field –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, 
    # –Ω–æ Django –ø–æ–∫–∞–∂–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('partner_name', 'logo_url')
        }),
        ('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': (
                ('clicks_total', 'clicks_today'),
                ('clicks_week', 'clicks_month'),
                ('unique_users', 'statistics_link'),
            ),
            'classes': ('collapse',),
            'description': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–∫–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        }),
        ('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–π–º–∞', {
            'fields': (
                ('sum_min', 'sum_max'),
                ('term_min', 'term_max'),
            )
        }),
        ('–°—Ç–∞–≤–∫–∞ –∏ —É—Å–ª–æ–≤–∏—è', {
            'fields': (
                ('rate', 'rate_text'),
                ('approval_time', 'approval_probability'),
            )
        }),
        ('–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', {
            'fields': ('features',),
            'description': '–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: ["–ë–µ–∑ –æ—Ç–∫–∞–∑–∞", "–ü–µ—Ä–≤—ã–π –∑–∞–π–º 0%", "–û–Ω–ª–∞–π–Ω"]'
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞', {
            'fields': ('redirect_url',),
            'description': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {sub_id} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        }),
        ('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': (('is_active', 'priority'),)
        }),
    )
    
    readonly_fields = [
        'clicks_total', 'clicks_today', 'clicks_week', 'clicks_month',
        'unique_users', 'statistics_link'
    ]
    
    def sum_range(self, obj):
        return f"{obj.sum_min:,} - {obj.sum_max:,} ‚ÇΩ"
    sum_range.short_description = '–°—É–º–º–∞'
    
    def term_range(self, obj):
        return f"{obj.term_min} - {obj.term_max} –¥–Ω–µ–π"
    term_range.short_description = '–°—Ä–æ–∫'
    
    def clicks_total(self, obj):
        """–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"""
        count = obj.clicks.count()
        if count > 0:
            return format_html('<strong style="color: #155A31;">{}</strong>', count)
        return format_html('<span style="color: #999;">0</span>')
    clicks_total.short_description = '–í—Å–µ–≥–æ'
    
    def clicks_today(self, obj):
        """–ö–ª–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è"""
        from django.utils import timezone
        from datetime import timedelta
        
        today_start = timezone.now().replace(hour=0, minute=0, second=0, microsecond=0)
        count = obj.clicks.filter(created_at__gte=today_start).count()
        
        if count > 0:
            return format_html('<strong style="color: #AF6E3D;">{}</strong>', count)
        return format_html('<span style="color: #ccc;">0</span>')
    clicks_today.short_description = '–°–µ–≥–æ–¥–Ω—è'
    
    def clicks_week(self, obj):
        """–ö–ª–∏–∫–æ–≤ –∑–∞ 7 –¥–Ω–µ–π"""
        from django.utils import timezone
        from datetime import timedelta
        
        week_ago = timezone.now() - timedelta(days=7)
        count = obj.clicks.filter(created_at__gte=week_ago).count()
        
        if count > 0:
            return format_html('<span style="color: #2c3e50;">{}</span>', count)
        return format_html('<span style="color: #ccc;">0</span>')
    clicks_week.short_description = '7 –¥–Ω–µ–π'
    
    def clicks_month(self, obj):
        """–ö–ª–∏–∫–æ–≤ –∑–∞ 30 –¥–Ω–µ–π"""
        from django.utils import timezone
        from datetime import timedelta
        
        month_ago = timezone.now() - timedelta(days=30)
        count = obj.clicks.filter(created_at__gte=month_ago).count()
        
        if count > 0:
            return format_html('<span style="color: #3498db;">{}</span>', count)
        return format_html('<span style="color: #ccc;">0</span>')
    clicks_month.short_description = '30 –¥–Ω–µ–π'
    
    def unique_users(self, obj):
        """–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from django.utils import timezone
        from datetime import timedelta
        
        month_ago = timezone.now() - timedelta(days=30)
        count = obj.clicks.filter(created_at__gte=month_ago).values('vk_user_id').distinct().count()
        
        if count > 0:
            return format_html(
                '<span style="color: #8e44ad;" title="–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π">üë§ {}</span>', 
                count
            )
        return format_html('<span style="color: #ccc;">0</span>')
    unique_users.short_description = '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö'
    
    def statistics_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        url = f"/api/statistics/offers/{obj.id}/?days=30"
        return format_html('<a href="{}" target="_blank" style="text-decoration: none;">üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>', url)
    statistics_link.short_description = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        return qs.prefetch_related('clicks')


@admin.register(Subscriber)
class SubscriberAdmin(admin.ModelAdmin):
    list_display = [
        'vk_user_id',
        'brand',
        'status_badge',
        'messages_badge',
        'clicks_count',
        'created_at',
        'subscribed_at',
    ]
    list_filter = [
        'brand',
        'subscribed',
        'allowed_from_group',
        'created_at',
        'subscribed_at',
    ]
    search_fields = ['vk_user_id', 'group_id']
    readonly_fields = ['created_at', 'updated_at', 'clicks_count']
    actions = [export_subscribers_to_csv]
    inlines = [ClickLogInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('vk_user_id', 'group_id', 'brand')
        }),
        ('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', {
            'fields': ('subscribed', 'allowed_from_group')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('created_at', 'subscribed_at', 'unsubscribed_at', 'updated_at')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('clicks_count',)
        }),
    )
    
    def status_badge(self, obj):
        if obj.subscribed:
            return format_html('<span style="color: green;">‚úì –ü–æ–¥–ø–∏—Å–∞–Ω</span>')
        return format_html('<span style="color: red;">‚úó –û—Ç–ø–∏—Å–∞–Ω</span>')
    status_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def messages_badge(self, obj):
        if obj.allowed_from_group:
            return format_html('<span style="color: green;">üì© –†–∞–∑—Ä–µ—à–µ–Ω–æ</span>')
        return format_html('<span style="color: gray;">üì≠ –ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ</span>')
    messages_badge.short_description = '–°–æ–æ–±—â–µ–Ω–∏—è'
    
    def clicks_count(self, obj):
        return obj.clicks.count()
    clicks_count.short_description = '–ö–ª–∏–∫–æ–≤'


@admin.register(ClickLog)
class ClickLogAdmin(admin.ModelAdmin):
    list_display = ['offer_link', 'vk_user_id', 'subscriber_link', 'group_id', 'brand', 'created_at']
    list_filter = ['brand', 'created_at', 'offer']
    search_fields = ['vk_user_id', 'group_id', 'offer__partner_name']
    readonly_fields = ['created_at', 'subscriber', 'offer']
    
    def offer_link(self, obj):
        if obj.offer:
            url = f'/admin/app/offer/{obj.offer.id}/change/'
            return format_html('<a href="{}">{}</a>', url, obj.offer.partner_name)
        return '-'
    offer_link.short_description = '–û—Ñ—Ñ–µ—Ä'
    
    def subscriber_link(self, obj):
        if obj.subscriber:
            url = f'/admin/app/subscriber/{obj.subscriber.id}/change/'
            return format_html('<a href="{}">{}</a>', url, obj.subscriber.vk_user_id)
        return '-'
    subscriber_link.short_description = '–ü–æ–¥–ø–∏—Å—á–∏–∫'


@admin.register(ModalSettings)
class ModalSettingsAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    def has_add_permission(self, request):
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        return not ModalSettings.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        return False
    
    list_display = ['title', 'is_enabled', 'show_delay', 'updated_at']
    
    fieldsets = (
        ('üîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_enabled', 'show_delay', 'show_mode'),
            'description': '–í–∫–ª—é—á–∏—Ç–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ–∫–∞–∑–∞'
        }),
        ('üìù –¢–µ–∫—Å—Ç—ã', {
            'fields': (
                'title',
                'main_title',
                'subtitle',
                'description',
            ),
            'description': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ'
        }),
        ('üîò –ö–Ω–æ–ø–∫–∏', {
            'fields': (
                'button_text',
                'skip_button_text',
            ),
            'description': '–¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫'
        }),
        ('üé® –¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞', {
            'fields': (
                'background_color',
                ('background_gradient_start', 'background_gradient_end'),
            ),
            'description': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–æ–Ω –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞'
        }),
        ('üé® –¶–≤–µ—Ç–∞ –∏–∫–æ–Ω–∫–∏', {
            'fields': (
                'icon_background_color',
                ('icon_background_gradient_start', 'icon_background_gradient_end'),
                'icon_shadow',
            ),
            'description': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏–∫–æ–Ω–∫–∏'
        }),
        ('üé® –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞', {
            'fields': (
                'title_color',
                'subtitle_color',
                'description_color',
            ),
            'description': '–¶–≤–µ—Ç–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤'
        }),
        ('üé® –¶–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫', {
            'fields': (
                'button_background_color',
                ('button_background_gradient_start', 'button_background_gradient_end'),
                'button_text_color',
                'button_shadow',
                'skip_button_color',
            ),
            'description': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–æ–∫'
        }),
        ('üìè –†–∞–∑–º–µ—Ä—ã', {
            'fields': (
                'icon_size',
                'title_font_size',
                'subtitle_font_size',
                'description_font_size',
                'button_height',
                'button_font_size',
            ),
            'description': '–†–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
        }),
        ('‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã', {
            'fields': (
                'border_radius',
            ),
            'description': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã'
        }),
    )
    
    readonly_fields = ['created_at', 'updated_at']
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('preview/', self.admin_site.admin_view(self.preview_modal), name='app_modalsettings_preview'),
        ]
        return custom_urls + urls
    
    def preview_modal(self, request):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        settings = ModalSettings.get_or_create_settings()
        context = {
            'settings': settings.to_dict(),
            'title': '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞'
        }
        return render(request, 'admin/app/modalsettings/preview.html', context)
    
    def changelist_view(self, request, extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        extra_context = extra_context or {}
        extra_context['show_preview'] = True
        return super().changelist_view(request, extra_context)
    
    def change_view(self, request, object_id, form_url='', extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        extra_context = extra_context or {}
        extra_context['show_preview'] = True
        return super().change_view(request, object_id, form_url, extra_context)


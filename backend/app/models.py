from django.db import models
from django.utils import timezone


class Offer(models.Model):
    """–û—Ñ—Ñ–µ—Ä—ã –ú–§–û –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    partner_name = models.CharField(max_length=200, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞')
    logo_url = models.URLField(max_length=500, verbose_name='URL –ª–æ–≥–æ—Ç–∏–ø–∞')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–π–º–∞
    sum_min = models.IntegerField(verbose_name='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, ‚ÇΩ')
    sum_max = models.IntegerField(verbose_name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, ‚ÇΩ')
    term_min = models.IntegerField(verbose_name='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫, –¥–Ω–µ–π')
    term_max = models.IntegerField(verbose_name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫, –¥–Ω–µ–π')
    
    # –°—Ç–∞–≤–∫–∞
    rate = models.FloatField(verbose_name='–°—Ç–∞–≤–∫–∞ (% –≤ –¥–µ–Ω—å)')
    rate_text = models.CharField(max_length=100, verbose_name='–°—Ç–∞–≤–∫–∞ (—Ç–µ–∫—Å—Ç)', 
                                   help_text='–ù–∞–ø—Ä–∏–º–µ—Ä: "0.5% –≤ –¥–µ–Ω—å"')
    
    # –£—Å–ª–æ–≤–∏—è
    approval_time = models.CharField(max_length=100, verbose_name='–í—Ä–µ–º—è –æ–¥–æ–±—Ä–µ–Ω–∏—è',
                                      help_text='–ù–∞–ø—Ä–∏–º–µ—Ä: "15 –º–∏–Ω—É—Ç"')
    approval_probability = models.CharField(max_length=50, verbose_name='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è',
                                             choices=[
                                                 ('–≤—ã—Å–æ–∫–∞—è', '–í—ã—Å–æ–∫–∞—è'),
                                                 ('—Å—Ä–µ–¥–Ω—è—è', '–°—Ä–µ–¥–Ω—è—è'),
                                                 ('–Ω–∏–∑–∫–∞—è', '–ù–∏–∑–∫–∞—è'),
                                             ])
    
    # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (JSON –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏)
    features = models.JSONField(verbose_name='–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', default=list,
                                 help_text='–°–ø–∏—Å–æ–∫ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: ["–ë–µ–∑ –æ—Ç–∫–∞–∑–∞", "–ü–µ—Ä–≤—ã–π –∑–∞–π–º 0%"]')
    
    # –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    redirect_url = models.URLField(max_length=1000, verbose_name='URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞',
                                     help_text='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {sub_id} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–µ–Ω',
                                      help_text='–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    priority = models.IntegerField(default=0, verbose_name='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                                     help_text='–ß–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ')
    
    # –î–∞—Ç—ã
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–°–æ–∑–¥–∞–Ω')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–û–±–Ω–æ–≤–ª—ë–Ω')
    
    class Meta:
        db_table = 'offers'
        ordering = ['-priority', '-created_at']
        verbose_name = '–û—Ñ—Ñ–µ—Ä'
        verbose_name_plural = '–û—Ñ—Ñ–µ—Ä—ã'
    
    def __str__(self):
        return f"{self.partner_name} ({self.sum_min}-{self.sum_max}‚ÇΩ)"


class Subscriber(models.Model):
    """–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç VK Mini App"""
    vk_user_id = models.CharField(max_length=100, unique=True, db_index=True)
    group_id = models.CharField(max_length=100)
    brand = models.CharField(max_length=50, db_index=True)
    subscribed = models.BooleanField(default=True, db_index=True)
    allowed_from_group = models.BooleanField(default=False, db_index=True)
    created_at = models.DateTimeField(auto_now_add=True)
    subscribed_at = models.DateTimeField(null=True, blank=True)
    unsubscribed_at = models.DateTimeField(null=True, blank=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'subscribers'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['brand', 'subscribed', 'allowed_from_group']),
            models.Index(fields=['created_at']),
        ]

    def __str__(self):
        status = "‚úì" if self.subscribed else "‚úó"
        allowed = "üì©" if self.allowed_from_group else "üì≠"
        return f"{status} {allowed} VK:{self.vk_user_id} ({self.brand})"

    @property
    def can_receive_messages(self):
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–ø–∏—Å–∞–Ω –ò —Ä–∞–∑—Ä–µ—à–∏–ª)"""
        return self.subscribed and self.allowed_from_group


class ClickLog(models.Model):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º"""
    offer = models.ForeignKey(
        Offer,
        on_delete=models.CASCADE,
        related_name='clicks',
        verbose_name='–û—Ñ—Ñ–µ—Ä',
        null=True,
        blank=True
    )
    vk_user_id = models.CharField(max_length=100, null=True, blank=True, verbose_name='VK User ID')
    subscriber = models.ForeignKey(
        Subscriber,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='clicks',
        verbose_name='–ü–æ–¥–ø–∏—Å—á–∏–∫'
    )
    group_id = models.CharField(max_length=100, null=True, blank=True, verbose_name='Group ID')
    brand = models.CharField(max_length=50, null=True, blank=True, verbose_name='–ë—Ä–µ–Ω–¥')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –∫–ª–∏–∫–∞')
    ip_address = models.GenericIPAddressField(null=True, blank=True, verbose_name='IP –∞–¥—Ä–µ—Å')
    user_agent = models.TextField(null=True, blank=True, verbose_name='User Agent')

    class Meta:
        db_table = 'click_logs'
        ordering = ['-created_at']
        verbose_name = '–ö–ª–∏–∫ –ø–æ –æ—Ñ—Ñ–µ—Ä—É'
        verbose_name_plural = '–ö–ª–∏–∫–∏ –ø–æ –æ—Ñ—Ñ–µ—Ä–∞–º'

    def __str__(self):
        return f"Click {self.offer.partner_name} by {self.vk_user_id} at {self.created_at}"

